import math
import decimal
from decimal import Decimal
from fractions import Fraction
from numbers import Number
from numbers import Rational
from collections import abc
import itertools as it
import functools as ft
import operator
import typing

import gl2z
import prime_numbers
from quadratic_fields import RealQuadraticNumber, RealQuadraticField
import binary_quadratic_forms



class NonzeroIdeal(abc.Container):
    """
    Nonzero ideal in the ring of integers 𝓞_K of K=𝐐(√d).

    Henri Cohen, A Course in Computation Algebraic Number Theory, Graduate Texts in Mathematics, Volume 138, Springer, 1996.

    p. 166:
    Theorem 4.4.2. The ring 𝐙_K is a free Z-module of rank n=deg(K). This is true more generally for any non-zero ideal of
    𝐙_K.

    p. 166:
    Definition 4.4.3. A 𝐙-basis of the free module 𝐙_K will be called an integral
    basis of K. The discriminant of an integral basis is independent of the choice
    of that basis, and is called the discriminant of the field K and is denoted by
    d(K).

    Anthony W. Knapp, Advanced Algebra, Digital Second Edition, 2016.
    Chapter I, Section 7, "Relationship of Quadratic Forms to Ideals", pp. 38-50.

    p. 44:
    Lemma 1.19.
    (a) If a ≠ 0 and b' are integers such that a divides N(b' + δ) in 𝐙, then
    (a, b' + δ) = ⟨a, b' + δ⟩ in the sense that the free abelian subgroup of R generated
    by a and b' + δ coincides with the ideal generated by a and b' + δ.
    (b) If I is any nonzero ideal in R, then I is of the form I = ⟨a, r⟩ for some
    integer a > 0 and some r in R.
    """

    __slots__ = ["r1", "r2", "a", "r"]


    @staticmethod
    def orientation(r1: RealQuadraticNumber, r2: RealQuadraticNumber) -> RealQuadraticNumber:
        if not (r1.is_integral and r2.is_integral):
            raise ValueError(f"{r1=} and {r2=} must be integral elements of 𝐐(√d).")
        if r1.d != r2.d:
            raise ValueError(f"{r1=} and {r2=} must belong to same ring of integers 𝓞_𝐐(√d).")
        return r1 * r2.conjugate() - r1.conjugate() * r2

    
    def __init__(self, r1: RealQuadraticNumber, r2: RealQuadraticNumber) -> None:
        if type(self).orientation(r1, r2) > 0:
            self.r1, self.r2 = r1, r2
        elif type(self).orientation(r1, r2) < 0:
            self.r1, self.r2 = r2, r1
        else:
            raise ValueError(f"{r1} and {r2} must have nonzero orientation.")
        
        
    def __repr__(self) -> str:
        return f"{type(self).__name__}({self.r1}, {self.r2})"
    
    def __hash__(self) -> int:
        return hash((self.r1, self.r2))
        
    @property
    def d(self) -> int:
        return self.r1.d

    @property
    def oriented_volume(self) -> RealQuadraticNumber:
        return type(self).orientation(self.r1, self.r2)
    
    @property
    def volume(self) -> RealQuadraticNumber:
        if self.oriented_volume < 0:
            return -self.oriented_volume
        return self.oriented_volume

    @property
    def D(self: typing.Self) -> int: # discriminant
        """
        Henri Cohen, A Course in Computation Algebraic Number Theory, Graduate Texts in Mathematics, Volume 138, Springer, 1996.
        p. 167:

        Proposition 4.4.5. The algebraic numbers 𝛼1, ..., 𝛼n form an integral basis
        if and only if they are algebraic integers and if d(𝛼1, ..., 𝛼n) = d(K), where
        d(K) is the discriminant of K.
        """
        return self.d if self.d % 4 == 1 else 4 * self.d

    @property
    def norm(self) -> int:
        d = self.d
        if d % 4 == 1: # D = d
            D_sqrt = RealQuadraticNumber(d, 0, 1)
            return int(self.volume / D_sqrt)
        elif d % 4 in [2, 3]: # D = 4d
            D_sqrt = RealQuadraticNumber(d, 0, 2)
            return int(self.volume / D_sqrt)
        
    def canonical_basis(self):
        """
        Return (a, r) with a ∈ Z_{>0}, r = b0 + δ and gcd(a, b0) = 1,
        oriented so that (r / a) has positive imaginary part.
        """
        # put r1, r2 into the integral basis (1, ω)
        d = self.d
        omega  = RealQuadraticField(d).omega
        m  = gl2z.M2Z(self.r1.x, self.r2.x, self.r1.y, self.r2.y) # 2×2 integer matrix
        _, H  = gl2z.hnf_2x2(m.transpose())            # any HNF routine you like
        a, b0 = H.a11, H.a12                           # first row (a, b0)
        if a < 0:
            a, b0 = -a, -b0              

        # unique representative 0 ≤ b0 < a
        b0 %= a                          
        r     = b0 + omega                         # b0 + δ, δ = ω − ½tr ω
        
        return RealQuadraticNumber(d, a, 0), r

    def __contains__(self, item: RealQuadraticNumber | Rational) -> bool:
        """
        a1 * r1 + a2 * r2 = r
        a1(x1 + y1√d) + a2(x2 + y2√d) = x + y√d
        a1x1 + a2x2 + (a1y1 + a2y2)√d = x + y√d
        x1a1 + x2a2 = x
        y1a1 + y2a2 = y

        Cramer's rule:
        a1 = (x * y2 - x2 * y) / (x1y2 - x2y1) 
        a2 = (x1 * y - x * y1) / (x1y2 - x2y1)
        """
        if isinstance(item, Rational):
            item = RealQuadraticNumber(self.d, item, 0)
        if not item.is_integral:
            raise ValueError(f"{item=} must be an integral element of 𝐐(√d).")
        a, r = self.a, self.r
        ax, ay, rx, ry, x, y = a.x, a.y, r.x, r.y, item.x, item.y
        D = ax * ry - rx * ay # nonzero by nonzero orientation

        a1 = Fraction(x * ry - rx * y, D)
        a2 = Fraction(ax * y - x * ay, D)
        if a1.denominator == 1 and a2.denominator == 1:
            return True
        return False
    

    def bqf(self) -> binary_quadratic_forms.IndefiniteBQF:
        """
        Anthony W. Knapp, Advanced Algebra, Digital Second Edition, 2016.
        Chapter I, Section 7, "Relationship of Quadratic Forms to Ideals", pp. 38-50.
        Return the primitive binary quadratic form that Knapp (Ch. I §7, pp 42-43)
        attaches to the ideal I = ⟨r1, r2⟩.

            a =  N(r1) / N(I)
            b =  Tr(r1 * 𝜎(r2)) / N(I)
            c =  N(r2) / N(I)

        The trace makes b rational; we then clear any remaining denominators
        and divide out the overall gcd so that (a,b,c) is primitive.
        """
        r1, r2 = self.r1, self.r2
        N_I = self.norm

        A = Fraction(r1.norm, N_I)
        B = Fraction((r1 * r2.conjugate()).trace, N_I)
        C = Fraction(r2.norm, N_I)

        denominator_lcm = math.lcm(A.denominator, B.denominator, C.denominator)
        a = (A * denominator_lcm).numerator
        b = (B * denominator_lcm).numerator
        c = (C * denominator_lcm).numerator

        g = math.gcd(a, b, c)

        return binary_quadratic_forms.IndefiniteBQF(a // g, b // g, c // g)


    @classmethod
    def bqf_to_ideal(cls, form: binary_quadratic_forms.IndefiniteBQF) -> typing.Self:
        """Inverse map *form -> ideal* (conductor‑aware).

        Works for any **primitive** indefinite form, even when its
        discriminant Δ is not fundamental.  Let ``f = form.conductor``;
        then Δ = Δ₀·f² with Δ₀ fundamental.  The ideal recovered is

            I = ⟨f , (−b + √Δ)/2⟩   ⊆  𝑶_{Δ₀} .

        The extra division by *f* ensures that

        ```python
        form == cls.bqf_to_ideal(form).bqf()
        ```

        and that `Norm(I)=f`.
        """
        D_big = form.D                                  # Δ
        f     = form.conductor                          # conductor
        D_fund = D_big // (f * f)                       # Δ₀
        d = D_fund if D_fund % 4 == 1 else D_fund // 4  # radicand

        K      = RealQuadraticField(d)
        omega  = K.omega
        delta  = K.delta

        # √Δ as element of 𝑶_{Δ₀}
        if d % 4 == 1:                                   # Δ = (2f)²·d
            sqrt_D = 2 * f * delta
        else:                                            # Δ = f²·4d
            sqrt_D = f * omega

        r = RealQuadraticNumber(d, Fraction(-form.b, 2), 0) + sqrt_D * Fraction(1, 2)
        g = RealQuadraticNumber(d, f, 0)

        from ideals import NonzeroIdeal
        return NonzeroIdeal(g, r)


    
    def __eq__(self, other: typing.Self) -> bool:
        return binary_quadratic_forms.IndefiniteBQF.are_equivalent(self.bqf(), other.bqf())
    
    def __mul__(self, other: typing.Self) -> typing.Self:
        bqf_self, bqf_other = self.bqf(), other.bqf()
        bqf_composed = bqf_self * bqf_other
        ideal_multiplied = type(self).bqf_to_ideal(bqf_composed)
        return ideal_multiplied
    
    def __rmul__(self, other: typing.Self) -> typing.Self:
        bqf_self, bqf_other = self.bqf(), other.bqf()
        bqf_composed = bqf_other * bqf_self
        ideal_multiplied = type(self).bqf_to_ideal(bqf_composed)
        return ideal_multiplied
    
    def inverse(self) -> typing.Self:
        bqf = self.bqf()
        bqf_inverse = bqf.inverse()
        inverse_ideal = type(self).bqf_to_ideal(bqf_inverse)
        return inverse_ideal
    
    def __truediv__(self, other: typing.Self) -> typing.Self:
        return self * other.inverse()
    
    def __rtruediv__(self, other: typing.Self) -> typing.Self:
        return other * self.inverse()

    @classmethod
    def prime_ideal(cls, d: int, p: int, t_sgn: int = 1) -> typing.Self:
        """
        Henri Cohen, A Course in Computational Algebraic Number Theory, Prop. 5.1.4, p. 224.

        Let K = Q(√D), 𝓞_K = Z[ω], with ω = (D + √D)/2.

        (1) If (D/p)=0 then p ramifies and
            pZ_K = 𝔭²,  𝔭 = ⟨p, ω⟩  (unless p=2 and D≡12 mod 16, then 𝔭=⟨2,1+ω⟩).
        (2) If (D/p)=–1 then p is inert and
            pZ_K itself is prime,  i.e.  (p) = ⟨p, p·ω⟩  (norm p²).
        (3) If (D/p)=+1 then p splits and
            pZ_K = 𝔭₁·𝔭₂,  
            𝔭₁ = ⟨p, ω – (D + b)/2⟩,  
            𝔭₂ = ⟨p, ω – (D – b)/2⟩,  
            where b² ≡ D (mod 4p) and you pick the sign of b via t_sgn=±1.
        """
        K = RealQuadraticField(d)
        D = K.D
        typ = K.prime_decomposition_type(p)

        # (1) ramified
        if typ == 0:
            if p == 2 and D % 16 == 12:
                return cls(p, 1 + K.omega)
            return cls(p, K.omega)
        # (2) inert: principal ideal (p) of norm p^2
        elif typ == -1:
            return cls(p, p * K.omega)
        # (3) split
        # solve b^2 ≡ D (mod 4p), pick ± via t_sgn
        elif typ == 1:
            b = prime_numbers.solve_quadratic_congruence(D, 4 * p)
            r = K.omega - Fraction(D + t_sgn * b, 2)
            return cls(p, r)
        else:
            raise ArithmeticError("Supporting ingredients are broken.")
        

if __name__ == "__main__":
    d = 19
    q1 = RealQuadraticNumber(d, 2, 2)
    q2 = RealQuadraticNumber(d, 0, 1)
    ideal1 = NonzeroIdeal(q1, q2)
    bqf1 = ideal1.bqf()

    print(NonzeroIdeal.bqf_to_ideal(bqf1).bqf(), bqf1, sep="\n")